"use client";
import { useEffect } from "react";
import Head from "next/head";
import dynamic from "next/dynamic";
import prisma from "../../lib/prisma";
import { getPollById } from "../../lib/polls";
import useStore from "../../store/store";
import { Flex } from "@chakra-ui/react";

// lazy imports
const PollLayout = dynamic(
  () => import("../../components/PollCard/poll-layout"),
  { ssr: false }
);
const PollUser = dynamic(() => import("../../components/PollCard/poll-user"), {
  ssr: false,
});

export async function getStaticPaths(a) {
  try {
    // Return a list of possible value for id
    const polls = await prisma.poll.findMany();

    // Map through all polls to get each ID
    const paths = polls.map((poll) => ({
      params: {
        id: poll.id.toString(),
      },
    }));

    return {
      paths,
      fallback: false,
    };
  } catch (error) {
    console.log(error);
  }
}

export async function getStaticProps({ params }) {
  const pollData = await getPollById(params.id);

  // will be passed to the page component as props
  return pollData;
}

/*
Poll prop:
  id: Number
  title: String
  colorScheme: String
  hideVotes: boolean
  startDate: isoString
  endDate: isoString
  backgroundURL: String
  queststions: [
    { 
      id: number, 
      question: string, 
      votes: number, 
      pollId: number 
    }
  ]
*/
const Poll = ({ poll }) => {
  useEffect(() => {
    useStore.setState({
      settings: {
        hideVotes: poll.hideVotes,
        startDate: new Date(poll.startDate).getTime(),
        endDate: new Date(poll.endDate).getTime(),
      },
      colorScheme: poll.colorScheme,
      pollTitle: poll.title,
      background: poll.backgroundURL,
      options: [...poll.questions],
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <>
      <Head>
        <title>Consensays</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Flex
        as={"main"}
        h={"100vh"}
        justifyContent={"center"}
        alignItems={"center"}
        flexDir={"column"}
        gap={5}
        background={`url(${poll.backgroundURL})`}
        backgroundSize={"cover"}
        backgroundRepeat={"no-repeat"}
        backgroundPosition={"center"}
      >
        <PollLayout>
          <PollUser />
        </PollLayout>
      </Flex>
    </>
  );
};

export default Poll;
